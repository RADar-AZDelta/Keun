rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    match /Keun-files/{fileId} {
      function isSignedIn() {
        // Check if the user is logged in
      	return request.auth != null;
      }
      
      function checkRole(expectedRole) {
      	// Check the role set in the Firestore collection "roles"
      	let roles = firestore.get(/databases/(default)/documents/roles/$(request.auth.token.email)).data.roles;
        return expectedRole in roles;
      }

      // function checkAuthorList() {
      	// Check if the user is in the authors list
        // let list = firestore.get(/databases/(default)/documents/files/$(fileId)).authors;
        // return request.auth.uid in list
      // }
      
      // function getRoleClaims(arr) {
      	// Check the roles through the custom claims in the auth
      	// return request.auth.token.role in arr;
      // }
      
      function checkProvider() {
      	// All the users must be logged in through OAuth of Microsoft
        // Microsoft is not an option here so it'll be custom
      	return request.auth.token.firebase.sign_in_provider != "anonymous"
      }
      
      // function checkRights() {
        // // Check if the user trying to read the file info, is in the list of authors
      	// let uid = request.auth.uid;
        // let authors = firestore.get(/databases/(default)/documents/files/$(fileId)).data.authors;
        // return uid in authors;
      // }

			// The user must be logged in through Microsoft, has the role "user" || "admin" & is in the list of authors for this file
      allow read, update: if isSignedIn() && (checkRole('user') || checkRole('admin')) && checkProvider();
			// The user must be logged in through Microsoft & has the role "admin"
      allow create, delete: if isSignedIn() && checkRole('admin') && checkProvider();
    }
    
    match /Keun-custom-files/{fileId} {
      function isSignedIn() {
        // Check if the user is logged in
      	return request.auth != null;
      }
      
      function checkRole(expectedRole) {
      	// Check the role set in the Firestore collection "roles"
      	let roles = firestore.get(/databases/(default)/documents/roles/$(request.auth.token.email)).data.roles;
        return expectedRole in roles;
      }

      // function checkAuthorList() {
      	// Check if the user is in the authors list
        // let list = firestore.get(/databases/(default)/documents/files/$(fileId)).authors;
        // return request.auth.uid in list
      // }
      
      // function getRoleClaims(arr) {
      	// Check the roles through the custom claims in the auth
      	// return request.auth.token.role in arr;
      // }
      
      function checkProvider() {
      	// All the users must be logged in through OAuth of Microsoft
        // Microsoft is not an option here so it'll be custom
      	return request.auth.token.firebase.sign_in_provider != "anonymous"
      }
      
      // function checkRights() {
        // // Check if the user trying to read the file info, is in the list of authors
      	// let uid = request.auth.uid;
        // let authors = firestore.get(/databases/(default)/documents/files/$(fileId)).data.authors;
        // return uid in authors;
      // }

			// The user must be logged in through Microsoft, has the role "user" || "admin" & is in the list of authors for this file
      allow read, update: if isSignedIn() && (checkRole('user') || checkRole('admin')) && checkProvider();
			// The user must be logged in through Microsoft & has the role "admin"
      allow create, delete: if isSignedIn() && checkRole('admin') && checkProvider();
    }
  }
}