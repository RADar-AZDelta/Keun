rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    match /Keun-files/{fileId} {
      function isSignedIn() {
        // Check if the user is logged in
      	return request.auth != null;
      }
      
      function getRole(arr) {
      	// Check the role set in the Firestore collection "roles"
      	let role = firestore.get(/databases/(default)/documents/roles/$(request.auth.uid)).data.role;
        return role in arr;
      }

      function checkAuthorList() {
      	// Check if the user is in the authors list
        let list = firestore.get(/databases/(default)/documents/files/$(fileId)).authors;
        return request.auth.uid in list
      }
      
      // function getRoleClaims(arr) {
      	// Check the roles through the custom claims in the auth
      	// return request.auth.token.role in arr;
      // }
      
      function checkProvider() {
      	// All the users must be logged in through OAuth of Microsoft
        // Microsoft is not an option here so it'll be custom
      	return request.auth.token.firebase.sign_in_provider != "anonymous"
      }
      
      function checkRights() {
        // Check if the user trying to read the file info, is in the list of authors
      	let uid = request.auth.uid;
        let authors = firestore.get(/databases/(default)/documents/files/$(fileId)).data.authors;
        return uid in authors;
      }

			// The user must be logged in through Microsoft, has the role "user" || "admin" & is in the list of authors for this file
      allow read, update: if isSignedIn() && getRole(['user', 'admin']) && checkRights() && checkAuthorList();
			// The user must be logged in through Microsoft & has the role "admin"
      allow create, delete: if isSignedIn() && getRole(['admin']) && checkProvider();
    }
    
    match /Keun-custom-files/{fileId} {
      function isSignedIn() {
        // Check if the user is logged in
      	return request.auth != null;
      }
      
      function getRole(arr) {
      	// Check the role set in the Firestore collection "roles"
      	let role = firestore.get(/databases/(default)/documents/roles/$(request.auth.uid)).data.role;
        return role in arr;
      }

      function checkAuthorList() {
      	// Check if the user is in the authors list
        let list = firestore.get(/databases/(default)/documents/files/$(fileId)).authors;
        return request.auth.uid in list
      }
      
      // function getRoleClaims(arr) {
      	// Check the roles through the custom claims in the auth
      	// return request.auth.token.role in arr;
      // }
      
      function checkProvider() {
      	// All the users must be logged in through OAuth of Microsoft
        // Microsoft is not an option here so it'll be custom
      	return request.auth.token.firebase.sign_in_provider != "anonymous"
      }
      
      function checkRights() {
        // Check if the user trying to read the file info, is in the list of authors
      	let uid = request.auth.uid;
        let authors = firestore.get(/databases/(default)/documents/files/$(fileId)).data.authors;
        return uid in authors;
      }

			// The user must be logged in through Microsoft, has the role "user" || "admin" & is in the list of authors for this file
      allow read, update: if isSignedIn() && getRole(['user', 'admin']) && checkRights() && checkAuthorList();
			// The user must be logged in through Microsoft & has the role "admin"
      allow create, delete: if isSignedIn() && getRole(['admin']) && checkProvider();
    }
  }
}